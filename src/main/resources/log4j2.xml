<?xml version="1.0" encoding="UTF-8"?>

<!-- status : 这个用于设置log4j2自身内部的信息输出,可以不设置,当设置成trace时,会看到log4j2内部各种详细输出 monitorInterval 
	: Log4j能够自动检测修改配置文件和重新配置本身, 设置间隔秒数。 注：本配置文件的目标是将不同级别的日志输出到不同文件，最大2MB一个文件， 
	文件数据达到最大值时，旧数据会被压缩并放进指定文件夹 -->
<Configuration status="INFO" monitorInterval="600">

	<!-- 配置日志文件输出目录，此配置将日志输出到tomcat根目录下的指定文件夹
		${sys:catalina.home}
	 -->
	<properties>
		<property name="BASE">D:/tomcat/apache-tomcat-9.0.11</property>
		<property name="LOG_HOME">${BASE}/logs/sltas_order_core/all_log</property>
		<property name="ALL_LOG">all_log</property>
		<property name="ERR_LOG">err_log</property>
	</properties>

	<Appenders>
		<!--这个输出控制台的配置，这里输出除了warn和error级别的信息到System.out -->
		<Console name="Console" target="SYSTEM_OUT">

			<!-- 控制台只输出level及以上级别的信息(onMatch),其他的直接拒绝(onMismatch) <ThresholdFilter 
				level="FATAL" onMatch="DENY" onMismatch="ACCEPT"/> -->

			<!-- 输出日志的格式 -->
			<PatternLayout>
				<pattern>
					%d{yyyy-MM-dd HH:mm:ss SSS} %-5level [%X{sid}] [%X{oid}] [%X{cid}] [%t] %F %M(%L) - %msg%n
				</pattern>
			</PatternLayout>
		</Console>

		<!-- Release 设置日志格式并配置日志压缩格式，压缩文件独立放在一个文件夹内， 日期格式不能为冒号，否则无法生成，因为文件名不允许有冒号，此appender只输出trace级别的数据到all_log.log 
			immediateFlush="true" -->
		<RollingRandomAccessFile name="all_log"
			fileName="${LOG_HOME}/${ALL_LOG}.log"
			filePattern="${LOG_HOME}/$${date:yyyy-MM-dd}/${ALL_LOG}.%d{yyyy-MM-dd.HH}-%i.log.gz">
			<PatternLayout>
				<pattern>
					<!-- 
						sid : 子业务id
						oid : 操作关键信息 例如（trans_no item_no third_party_no）
						cid : 操作关键信息的每次流水信息 （pay_no,refund_no）
					  -->
					%d{yyyy-MM-dd HH:mm:ss SSS} %-5level [%X{sid}] [%X{oid}] [%X{cid}] [%t] %F %M(%L) - %msg%n
				</pattern>
			</PatternLayout>
			<Policies>
				<!-- 基于时间的触发策略。该策略主要是完成周期性的log文件封存工作。有两个参数： interval，integer型，指定两次封存动作之间的时间间隔。单位:以日志的命名精度来确定单位， 
					比如yyyy-MM-dd-HH 单位为小时，yyyy-MM-dd-HH-mm 单位为分钟 modulate，boolean型，说明是否对封存时间进行调制。若modulate=true， 
					则封存时间将以0点为边界进行偏移计算。比如，modulate=true，interval=4hours， 那么假设上次封存日志的时间为03:00，则下次封存日志的时间为04:00， 
					之后的封存时间依次为08:00，12:00，16:00 -->
				<TimeBasedTriggeringPolicy interval="1" />
				<!-- 每个日志文件最大 10MB -->
				<SizeBasedTriggeringPolicy size="300 MB" />
			</Policies>
			<!-- DefaultRolloverStrategy字段中加入max=“30”经测试是配合SizeBasedTriggeringPolicy限制%i的存在数量 -->
			<DefaultRolloverStrategy max="100" />
		</RollingRandomAccessFile>

		<!-- error_log -->
		<RollingRandomAccessFile name="error_log"
			fileName="${LOG_HOME}/${ERR_LOG}.log"
			filePattern="${LOG_HOME}/$${date:yyyy-MM-dd}/${ERR_LOG}.%d{yyyy-MM-dd.HH}-%i.log.gz">
			<PatternLayout>
				<pattern>
					%d{yyyy-MM-dd HH:mm:ss SSS} %-5level [%X{sid}] [%X{oid}] [%X{cid}] [%t] %l - %msg%n
				</pattern>
			</PatternLayout>
			<Policies>
				<TimeBasedTriggeringPolicy interval="1" />
				<SizeBasedTriggeringPolicy size="300 MB" />
			</Policies>
			<DefaultRolloverStrategy max="100" />
			<Filters>
				<!-- level 输出级别，例：level=”info”,日志级别为info或者以上(匹配的界别) onMatch DENY/ACCEPT 
					禁止或者接受（是否接受匹配） onMismatch DENY/NEUTRAL （是否接受其他高于level的级别） -->
				<!-- 下面的配置文件定义了一个日志级别过滤器ThresholdFilter，将error以上的日志信息输出到文件上。 所有过滤器都有两个属性onMatch和onMismatch，指定匹配过滤器和不匹配过滤器时候执行的操作， 
					有三个取值ACCEPT，DENY，NEUTRAL。 -->
				<ThresholdFilter level="fatal" onMatch="DENY"
					onMismatch="NEUTRAL" />
				<ThresholdFilter level="error" onMatch="ACCEPT"
					onMismatch="DENY" />
			</Filters>
		</RollingRandomAccessFile>

	    <!-- 
	    <RabbitMQ name="rabbitmq"
	        addresses="foo:5672,bar:5672" user="guest" password="guest" virtualHost="/"
	        exchange="log4j2" exchangeType="topic" declareExchange="true" durable="true" autoDelete="false"
	        applicationId="myAppId" routingKeyPattern="%X{applicationId}.%c.%p"
	        contentType="text/plain" contentEncoding="UTF-8" generateId="true" deliveryMode="NON_PERSISTENT"
	        charset="UTF-8"
	        senderPoolSize="3" maxSenderRetries="5">
	    </RabbitMQ>
	     -->

	</Appenders>

	<Loggers>

		<!-- 混合异步 
		<AsyncLogger name="com.sltas" level="INFO" includeLocation="true">
			<AppenderRef ref="Console" />
			<AppenderRef ref="all_log" />
			<AppenderRef ref="error_log" />
		</AsyncLogger> -->


		<!--忽略第三方包的日志 
		<AsyncRoot level="OFF">
		</AsyncRoot> -->




		<!-- 异步和非异步混合输出模式(具体实现 LMAX Disruptor) --> 
		<AsyncRoot level="INFO" includeLocation="true"> 
			<AppenderRef ref="Console" /> 
			<AppenderRef ref="all_log"/> 
			<AppenderRef ref="error_log"/> 
		</AsyncRoot> 

		<!-- <Logger name="mylog" level="trace" additivity="true"> <AppenderRef 
			ref="release_log" /> </Logger> -->
		<!-- 日志级别从低到高分为TRACE < DEBUG < INFO < WARN < ERROR < FATAL，如果设置为WARN，则低于WARN的信息都不会输出。对于Loggers中level的定义同样适用。 
			includeLocation="true" -->
		<!-- <Root level="INFO"> <AppenderRef ref="Console" /> <AppenderRef ref="all_log"/> 
			<AppenderRef ref="error_log"/> </Root> -->

	</Loggers>
</Configuration>  